// <auto-generated />
using System;
using Infrastructure.Data.AdventureWorks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.AdventureWorks.Migrations
{
    [DbContext(typeof(AdventureWorksContext))]
    partial class AdventureWorksContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Core.Entities.AdventureWorks.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOnUtc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("Num")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int>("SalesAgentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOnUtc")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("BillToAddressId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOnUtc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreditCardApprovalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Freight")
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsOnlineOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Num")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderAddressId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderAddressId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PurchaseOrderNum")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<byte>("RevisionNum")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShipMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ShipToAddressId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShipToAddressId1")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SubTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<double>("TaxAmt")
                        .HasColumnType("decimal(18,4)");

                    b.Property<double>("TotalDue")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderAddressId");

                    b.HasIndex("OrderAddressId1");

                    b.HasIndex("ShipToAddressId1");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.OrderAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOnUtc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("Line2")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OrderAddress");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.OrderLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOnUtc")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LineTotal")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId1")
                        .HasColumnType("INTEGER");

                    b.Property<short>("OrderQty")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId1")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<double>("UnitPriceDiscount")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId1");

                    b.HasIndex("ProductId1");

                    b.ToTable("OrderLineItem");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOnUtc")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("ListPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Num")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductCategoryId1")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ProductModelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductModelId1")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<double>("StandardCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("BLOB");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId1");

                    b.HasIndex("ProductModelId1");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOnUtc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.ProductModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatedOnUtc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("UpdatedOnUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductModel");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.SalesAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SalesAgent");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.Customer", b =>
                {
                    b.HasOne("Core.Entities.AdventureWorks.SalesAgent", "SalesAgent")
                        .WithMany("Customers")
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesAgent");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.CustomerAddress", b =>
                {
                    b.HasOne("Core.Entities.AdventureWorks.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.Order", b =>
                {
                    b.HasOne("Core.Entities.AdventureWorks.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdventureWorks.OrderAddress", null)
                        .WithMany("BillToOrders")
                        .HasForeignKey("OrderAddressId");

                    b.HasOne("Core.Entities.AdventureWorks.OrderAddress", null)
                        .WithMany("ShipToOrders")
                        .HasForeignKey("OrderAddressId1");

                    b.HasOne("Core.Entities.AdventureWorks.OrderAddress", "ShipToAddress")
                        .WithMany()
                        .HasForeignKey("ShipToAddressId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ShipToAddress");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.OrderLineItem", b =>
                {
                    b.HasOne("Core.Entities.AdventureWorks.Order", "Order")
                        .WithMany("OrderLineItems")
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdventureWorks.Product", "Product")
                        .WithMany("OrderLineItems")
                        .HasForeignKey("ProductId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.Product", b =>
                {
                    b.HasOne("Core.Entities.AdventureWorks.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.AdventureWorks.ProductModel", "ProductModel")
                        .WithMany("Products")
                        .HasForeignKey("ProductModelId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.Order", b =>
                {
                    b.Navigation("OrderLineItems");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.OrderAddress", b =>
                {
                    b.Navigation("BillToOrders");

                    b.Navigation("ShipToOrders");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.Product", b =>
                {
                    b.Navigation("OrderLineItems");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.ProductModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Core.Entities.AdventureWorks.SalesAgent", b =>
                {
                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
